{"version":3,"sources":["contexts/AppContext.js","libs/guid.js","components/TaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","AppProvider","Consumer","Provider","S4","Math","random","toString","substring","getGuid","substr","toLowerCase","TaskForm","useState","name","setName","status","setStatus","appContext","useContext","selectedTask","setIsDisplayForm","addTask","useEffect","className","id","role","onClick","onSubmit","e","preventDefault","task","submit","onReset","cancel","type","required","placeholder","value","onChange","target","JSON","parse","Search","keyword","setKeyword","searchChange","onKeyPress","key","Sort","sortInfo","sortChange","data-toggle","aria-haspopup","aria-expanded","by","Control","TaskItem","props","updateTaskStatus","updateTask","deleteTask","index","TaskList","filterName","setFilterName","filterStatus","setFilterStatus","filteredTasks","filterChange","elementTask","map","parseInt","App","tasks","setTasks","isDisplayForm","setSelectedTask","filterInfo","setFilterInfo","searchKeyword","setSearchKeyword","setSortInfo","localStorage","getItem","localStorageTasks","elementTaskForm","filter","t","indexOf","sort","x","y","find","setItem","stringify","findIndex","window","confirm","splice","newTask","sortBy","sortValue","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.508e5235.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nconst AppContext = createContext();\r\nconst AppConsumer = AppContext.Consumer;\r\nconst AppProvider = AppContext.Provider;\r\n\r\nexport default AppContext;\r\nexport {AppConsumer, AppProvider};\r\n","const S4 = () => (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\nconst getGuid = () => (S4() + S4() + \"-\" + S4() + \"-4\" + S4().substr(0, 3) + \"-\" + S4() + \"-\" + S4() + S4() + S4()).toLowerCase();\r\nexport default getGuid;","import React, { useState, useContext } from 'react';\r\nimport getGuid from '../../src/libs/guid';\r\nimport { useEffect } from 'react';\r\nimport AppContext from '../contexts/AppContext';\r\nfunction TaskForm() {\r\n    const [name, setName] = useState(\"\");\r\n    const [status, setStatus] = useState(true);\r\n    const appContext = useContext(AppContext);\r\n    const {selectedTask, setIsDisplayForm, addTask} = appContext;    \r\n    useEffect(() => {\r\n        if(selectedTask){\r\n            setName(selectedTask.name);\r\n            setStatus(selectedTask.status);\r\n        }        \r\n    }, [selectedTask])\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault();       \r\n        const task = {id: selectedTask ? selectedTask.id : getGuid(), name: name, status: status};\r\n        addTask(task);\r\n        setName(\"\");\r\n        setStatus(true);\r\n    }\r\n    \r\n    const cancel = (e) => {\r\n        e.preventDefault();\r\n        if(!selectedTask){\r\n            setName(\"\");\r\n            setStatus(true);\r\n        }   \r\n    }\r\n\r\n    return (\r\n        <div className=\"panel panel-primary\">\r\n            <div className=\"panel-heading\">\r\n                <h3 className=\"panel-title\">{selectedTask && selectedTask.id ? \"Update\" : \"Add\"} Task<a role=\"button\" className=\"pull-right\" onClick={() => setIsDisplayForm(false)}><i className=\"fa fa-times-circle\"></i></a></h3>                \r\n            </div>\r\n            <div className=\"panel-body\">\r\n                <form onSubmit={(e) => submit(e)} onReset={(e) => cancel(e)}>\r\n                    <div className=\"form-group\">\r\n                        <label>Name</label>\r\n                        <input type=\"text\" className=\"form-control\" required=\"required\" placeholder=\"Input Name\" value={name} onChange={(e) => setName(e.target.value)}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Status</label>\r\n                        <select className=\"form-control\" required=\"required\" value={status} onChange={(e) => setStatus(JSON.parse(e.target.value))}>\r\n                            <option value={true}>Active</option>\r\n                            <option value={false}>Inactive</option>\r\n                        </select>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-success\"><i className=\"fa fa-floppy-o\"></i>&nbsp;Save</button>\r\n                  &nbsp;\r\n                  <button type=\"reset\" className=\"btn btn-danger\"><i className=\"fa fa fa-refresh\"></i>&nbsp;Cancel</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskForm;\r\n","import React, { useState, useContext } from 'react';\r\nimport AppContext from '../contexts/AppContext';\r\n\r\nfunction Search() {\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const appContext = useContext(AppContext);\r\n    const { searchChange } = appContext;\r\n    return (\r\n        <div className=\"input-group\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Input keyword...\" value={keyword} onChange={(e) => setKeyword(e.target.value)} onKeyPress={(e) => { if (e.key === \"Enter\") { searchChange(keyword) } }} />\r\n            <span className=\"input-group-btn\">\r\n                <button className=\"btn btn-primary\" type=\"button\" onClick={() => searchChange(keyword)}><i className=\"fa fa-search\"></i>&nbsp;Search</button>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useContext } from 'react';\r\nimport AppContext from '../contexts/AppContext';\r\n\r\nfunction Sort() {\r\n    const appContext = useContext(AppContext);\r\n    const {sortInfo, sortChange} = appContext;\r\n\r\n    return (\r\n        <div className=\"btn-group\">\r\n            <button type=\"button\" className=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                Sort&nbsp;<i className=\"fa fa-caret-square-o-down\"></i>\r\n            </button>\r\n            <ul className=\"dropdown-menu\">\r\n                <li className={sortInfo.by === \"name\" && sortInfo.value === 1 ? \"active\" : null}><a role=\"button\" onClick={() => sortChange(\"name\", 1)}><i className=\"fa fa-sort-alpha-asc\"></i>&nbsp;Name Ascending</a></li>\r\n                <li className={sortInfo.by === \"name\" && sortInfo.value === -1 ? \"active\" : null}><a role=\"button\" onClick={() => sortChange(\"name\", -1)}><i className=\"fa fa-sort-alpha-desc\"></i>&nbsp;Name Descending</a></li>\r\n                <li role=\"separator\" className=\"divider\"></li>\r\n                <li className={sortInfo.by === \"status\" && sortInfo.value === -1 ? \"active\" : null}><a role=\"button\" onClick={() => sortChange(\"status\", -1)}>Active</a></li>\r\n                <li className={sortInfo.by === \"status\" && sortInfo.value === 1 ? \"active\" : null}><a role=\"button\" onClick={() => sortChange(\"status\", 1)}>Inactive</a></li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sort;\r\n","import React, { Fragment } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\n\r\nfunction Control() {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <Search />\r\n            </div>\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <Sort />\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Control;\r\n","import React, { useContext } from 'react';\r\nimport AppContext from '../contexts/AppContext';\r\n\r\nfunction TaskItem(props) {\r\n    const appContext = useContext(AppContext);\r\n    const {updateTaskStatus, updateTask, deleteTask} = appContext;\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.index + 1}</td>\r\n            <td>{props.task.name}</td>\r\n            <td>{props.task.status ? <span role=\"button\" className=\"label label-success\" onClick={() => updateTaskStatus(props.task.id)}>Active</span> : <span role=\"button\" className=\"label label-danger\" onClick={() => updateTaskStatus(props.task.id)}>Inactive</span>}</td>\r\n            <td>\r\n                <button type=\"button\" className=\"btn btn-warning\" onClick={() => updateTask(props.task.id)}><i className=\"fa fa-pencil-square-o\"></i>&nbsp;Edit</button>\r\n                    &nbsp;\r\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={() => deleteTask(props.task.id)}><i className=\"fa fa-trash\"></i>&nbsp;Delete</button>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TaskItem;\r\n","import React, { useState, useContext } from 'react';\r\nimport AppContext from '../contexts/AppContext';\r\nimport TaskItem from './TaskItem';\r\n\r\nfunction TaskList() {\r\n    const [filterName, setFilterName] = useState(\"\");\r\n    const [filterStatus, setFilterStatus] = useState(-1);    \r\n    const appContext = useContext(AppContext);\r\n    const {filteredTasks, filterChange} = appContext;    \r\n    const elementTask = filteredTasks.map((task, index) => <TaskItem key={task.id} index={index} task={task}></TaskItem>)\r\n    return (\r\n        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n            <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>No#</th>\r\n                        <th>Name</th>\r\n                        <th>Status</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td></td>\r\n                        <td>\r\n                            <input type=\"text\" className=\"form-control\" value={filterName} onChange={(e) => { setFilterName(e.target.value); filterChange(e.target.value, filterStatus) }} />\r\n                        </td>\r\n                        <td>\r\n                            <select className=\"form-control\" required=\"required\" value={filterStatus} onChange={(e) => { setFilterStatus(parseInt(e.target.value)); filterChange(filterName, parseInt(e.target.value)) }}>\r\n                                <option value={1}>Active</option>\r\n                                <option value={0}>Inactive</option>\r\n                                <option value={-1}>All</option>\r\n                            </select>\r\n                        </td>\r\n                        <td></td>\r\n                    </tr>\r\n                    {elementTask}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {AppProvider} from './contexts/AppContext';\r\n//import getGuid from '../src/libs/guid';\r\nimport TaskForm from './components/TaskForm';\r\nimport Control from './components/Control';\r\nimport TaskList from './components/TaskList';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nfunction App() {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [isDisplayForm, setIsDisplayForm] = useState(false);\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  const [filterInfo, setFilterInfo] = useState({ name: \"\", status: -1 });\r\n  const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n  const [sortInfo, setSortInfo] = useState({ by: \"status\", value: 1 });\r\n\r\n  useEffect(() => {\r\n    if (localStorage && localStorage.getItem(\"tasks\")) {\r\n      const localStorageTasks = JSON.parse(localStorage.getItem(\"tasks\"));\r\n      setTasks(localStorageTasks);\r\n    }\r\n  }, [])\r\n\r\n  /* const initTask = () => {\r\n    const tasks = [\r\n      { id: getGuid(), name: \"Reactjs\", status: true },\r\n      { id: getGuid(), name: \"Angularjs\", status: false },\r\n      { id: getGuid(), name: \"Vuejs\", status: true },\r\n    ];\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }; */\r\n\r\n  const addTask = (task) => {\r\n    if (tasks) {\r\n      const newTask = tasks.find(t => t.id === task.id);\r\n      //for Update Task\r\n      if (newTask) {\r\n        newTask.name = task.name;\r\n        newTask.status = task.status;\r\n        localStorage.setItem(\"tasks\", JSON.stringify([...tasks]));\r\n        setTasks([...tasks]);\r\n\r\n        setSelectedTask(null);\r\n        setIsDisplayForm(false);\r\n        return;\r\n      }\r\n    }\r\n    //for Add Task\r\n    localStorage.setItem(\"tasks\", JSON.stringify([...tasks, task]));\r\n    setTasks([...tasks, task]);\r\n    setIsDisplayForm(false);\r\n  }\r\n\r\n  const deleteTask = (id) => {\r\n    const index = tasks.findIndex(t => t.id === id);\r\n    if (index === -1) {\r\n      return;\r\n    }\r\n\r\n    if (!window.confirm(\"Confirm?\")) {\r\n      return;\r\n    }\r\n\r\n    tasks.splice(index, 1);\r\n    localStorage.setItem(\"tasks\", JSON.stringify([...tasks]));\r\n    setTasks([...tasks]);\r\n    setIsDisplayForm(false);\r\n  }\r\n\r\n  const updateTask = (id) => {\r\n    const task = tasks.find(t => t.id === id);\r\n    if (!task) {\r\n      return;\r\n    }\r\n    setSelectedTask(task);\r\n    setIsDisplayForm(true);\r\n  }\r\n\r\n  const updateTaskStatus = (id) => {\r\n    const task = tasks.find(t => t.id === id);\r\n    if (!task) {\r\n      return;\r\n    }\r\n    task.status = !task.status;\r\n    localStorage.setItem(\"tasks\", JSON.stringify([...tasks]));\r\n    setTasks([...tasks]);\r\n    setIsDisplayForm(false);\r\n  }\r\n\r\n  const filterChange = (filterName, filterStatus) => {\r\n    setFilterInfo({ name: filterName, status: filterStatus });\r\n  }\r\n\r\n  const searchChange = (keyword) => {\r\n    setSearchKeyword(keyword);\r\n  }\r\n\r\n  const sortChange = (sortBy, sortValue) => {\r\n    setSortInfo({ by: sortBy, value: sortValue });\r\n  }\r\n\r\n  const elementTaskForm = isDisplayForm ? <TaskForm /> : null;\r\n  const filteredTasks = [...tasks]\r\n    .filter(t => (!searchKeyword || t.name.toLowerCase().indexOf(searchKeyword.toLowerCase()) > -1))\r\n    .filter(t => (!filterInfo.name || t.name.toLowerCase().indexOf(filterInfo.name.toLowerCase()) > -1) && (filterInfo.status === -1 || t.status === (filterInfo.status === 1)))\r\n    .sort((x, y) => x[sortInfo.by] >= y[sortInfo.by] ? sortInfo.value : -(sortInfo.value));\r\n\r\n  return (\r\n    <AppProvider value={{filteredTasks, updateTaskStatus, deleteTask, updateTask, filterChange, selectedTask, setIsDisplayForm, addTask, searchChange, sortInfo, sortChange}}>    \r\n    <div className=\"container\">\r\n      <div className=\"row text-center\">\r\n        <h1>Task Management</h1>\r\n      </div>\r\n      <div className=\"row\">\r\n        <hr />\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          {elementTaskForm}\r\n        </div>\r\n        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n          <div className=\"row\">\r\n            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\r\n              <button type=\"button\" className=\"btn btn-primary\" onClick={() => { setSelectedTask(null); setIsDisplayForm(!isDisplayForm); }}><span className=\"glyphicon glyphicon-plus\"></span>&nbsp;Add Task</button>\r\n              {/* &nbsp;\r\n              <button type=\"button\" className=\"btn btn-warning\" onClick={() => initTask()}>Init Task</button> */}\r\n            </div>\r\n          </div>\r\n          <div className=\"row mt-10\">\r\n            <Control />\r\n          </div>\r\n          <div className=\"row mt-10\">\r\n            <TaskList />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </AppProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}